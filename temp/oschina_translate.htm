<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<title>你应该使用 Nginx + UWSGI - 技术翻译 - 开源中国社区</title>
<script type="text/javascript" src="http://www.oschina.net/js/2011/jquery-1.5.1.min.js"></script>
<script type="text/javascript" src="http://www.oschina.net/js/syntax-highlighter-2.1.382/scripts/brush.js"></script>
<link type="text/css" rel="stylesheet" href="http://www.oschina.net/js/syntax-highlighter-2.1.382/styles/shCore.css"/>
<link type="text/css" rel="stylesheet" href="http://www.oschina.net/js/syntax-highlighter-2.1.382/styles/shThemeDefault.css"/>
<script type='text/javascript'>
$(document).ready(function(){
    $('pre').each(function(){
        this.className = this.className.replace('toolbar: true;','');
        SyntaxHighlighter.highlight({toolbar:false},this);
    });
});
</script>
<style type='text/css'>
body{padding: 10px;margin: 0;background: white;color: #000000;}
body,table,input,textarea,select {font-family:微软雅黑,Verdana,sans-serif,宋体;}
a:link, a:visited {color: #000000;text-decoration: none;background: transparent;}
img {1px solid #cccccc;background-color: #fff;}
h1 {border-bottom:2px solid #666;padding:0 0 20px 0;}
.TextContent {line-height:1.2em;}
.TextContent pre {margin:10px 0;font-size:9pt;font-family:Courier New,Arial}
.TextContent code {margin: 0 2px;padding: 0 5px;white-space: nowrap;}
.TextContent pre>code {margin: 0;padding: 0;white-space: pre;border: none;background: transparent;}
.TextContent pre code{background-color: transparent;border: none;}
.TextContent ol,.TextContent ul {margin:20px 0 20px 20px;list-style-position: inside;}
.TextContent ol{list-style-type:decimal;margin: 0.5em 0 0.5em 1.5em;}
.TextContent ul{list-style-type:disc;margin: 0.5em 0 0.5em 1.5em;}
.TextContent img{max-width: 980px;}
.links{margin-top:1em;padding:1.25em 0;color:#666;}
.links a, .copyright a {color:#666;}
.links p{margin: 0; padding: 0;}
.copyright{padding:1.25em 0; border-top: 1px solid #AAA;color:#666;}
</style>
</head>
<body>
<h1>你应该使用 Nginx + UWSGI</h1>
<div class="TextContent">
<p>经过大量的实验（在 <a href="http://disqus.com" target="_blank" rel="nofollow">disqus.com</a>和 <a href="http://getsentry.com" target="_blank" rel="nofollow">getsentry.com</a>上），我可以确切的说：uwsgi应该成为Python世界的标准。 把它和nginx结合，在基于 <span>Python的Web应用程序上</span>你能获得在线程（或非线程）之上更好的性能体验。 </p>
<p>更新：忽略古老的说法“你给任何度量是慢”，我在这里说的请求是指后端节点，他们处理输入事件（从20KB到1MB大小的请求），在网络跳过数跳经过各种授权和配额策略，并最形成一些队列操作。卸载尽可能多的工作负载。(本段翻译有问题，请参考原文，译者注) </p>
<h1>服务策略 </h1>
<p><span style="line-height:1.5;font-size:10pt;">目前已经有相当数量的方法可以用来运行Python应用程序。我不打算使用mod_wsgi，最重要的，我并不想说明事件模型如何工作。我不相信在Python的世界它们依旧使用，所以这篇文章的主题也不是关于传统的线程（或</span><span style="line-height:1.5;font-size:10pt;">多进程）的Python应用程序。</span></p>
<p><span style="font-size:10pt;line-height:1.5;">相反，我将专注于两个最流行且我最熟悉的解决方案：gunicorn和uwsgi。</span></p>
<h2>Gunicorn(Python UNIX平台的wsgi服务器) </h2>
<p>回顾过去，<span style="font-family:Verdana, sans-serif, 宋体;">Python的Web服务器<span style="font-family:Verdana, sans-serif, 宋体;">的解决方案基本上只有</span></span>mod_wsgi。其中最流行的（或理解为时尚）的方法是最近Gunicorn。 </p>
<p>实际上，我仍然建议使用gunicorn，这样可以极大的减少不便：它可以漂亮的嵌入Django而且设置简单。 </p>
<p>它也有10％的<span style="font-family:Verdana, sans-serif, 宋体;">配置选项和</span>uwsgi一致（这对某些人来说是件好事），除此之外，比较看来，它提供了与<span style="font-family:Verdana, sans-serif, 宋体;">uwsgi<span style="font-family:Verdana, sans-serif, 宋体;">（或任何其他Python Web服务器）</span></span>几乎相同的基本特性。 </p>
<h2>uwsgi </h2>
<p>在我看来这是唯一的选择，从Gunicorn到uwsgi。将有更高性能的，有更多极易明白的配置选项，通过协议可以与nginx交互也增加了优势。<br />它的配置也是相当简单，找到一篇文章相关文章就可以了，后来更多。<br />我开始使用uwsgi来跑一些应用，使用–processes=10和–threads=10来测试服务器的多CPU，目的有两个： </p>
<ul>
 <li>支持情况 </li>
 <li>测试降低内存使用量的可能性 </li>
 <li>测试线程安全的支持情况 </li>
</ul>（对于这些测试是否值得，DISQUS是 单线程运行的，我想保持尽可能的精简，把每个节点的能力发挥到极致）
<h2>不断趋向成功的迭代 </h2>
<p><span style="font-family:Verdana, sans-serif, 宋体;">我们使API<span style="font-family:Verdana, sans-serif, 宋体;">平均</span>响应时间降到40ms以内，</span>我非常自豪。这里我说的API相应时间是指：从请求击中了Python服务器到服务器返回响应到代理所花费的时间。 </p>
<p>不幸的是，<span style="font-family:Verdana, sans-serif, 宋体;">当我们始获得越来越大的流量并出现访问尖峰后响应时间出现问题了</span>，波动的响应时间不再符合我们开始的设想，尽管服务节点上我们仍然有大约30％的内存和60％的资源空余。 </p>
<p>在不少调整后，我们停用了大量uwsgi进程的方法，让nginx的负载均衡它们（之前是让uwsgi本身负载平衡）。 </p>
<p>这意味着什么呢，是不是做uwsgi过程= 10，我们运行10个单独的uwsgi实例代替<span style="font-family:Verdana, sans-serif, 宋体;line-height:21px;background-color:#F6F6F6;">–processes=10</span>。 </p>
<p>其结果是一个美丽的，一致的20ms的平均响应时间。 </p>
<p><a href="http://justcramer.com/images/posts/consistent-api-times.png" rel="nofollow"><img src="http://static.oschina.net/uploads/img/201307/08153212_YEib.png" alt="API Times" /></a></p>
<p>API响应时间 </p>
<h2>将他们组合在一起 </h2>
<p><span style="line-height:1.5;font-size:10pt;">我喜欢着手去做而非空谈，这里我给大家一些我们</span><span style="line-height:1.5;font-size:10pt;">在线服务器的实际设置</span><span style="line-height:1.5;font-size:10pt;">。</span></p>
<h2>nginx </h2>
<p>配置的第一块是Nginx的，我们需要实际计算并添加uwsgi的进程 <span style="font-family:Verdana, sans-serif, 宋体;">后端</span>数量，所以事情有点复杂。 <span style="line-height:1.5;font-size:10pt;"><br /></span></p>
<p><span style="line-height:1.5;font-size:10pt;">我们首先建立在我们的网页配置列表：</span></p>
<pre class="brush:ruby; toolbar: true; auto-links: false;"># recipes/web.rb

hosts = (0..(node[:getsentry][:web][:processes] - 1)).to_a.map do |x|
  port = 9000 + x
  &quot;127.0.0.1:#{port}&quot;
end

template &quot;#{node['nginx']['dir']}/sites-available/getsentry.com&quot; do
  source &quot;nginx/getsentry.erb&quot;
  owner &quot;root&quot;
  group &quot;root&quot;
  variables(
    :hosts =&gt; hosts
  )
  mode 0644
  notifies :reload, &quot;service[nginx]&quot;
end</pre>
<span style="font-family:Verdana, sans-serif, 宋体;line-height:21px;background-color:#F6F6F6;">Nginx的配置很简单:</span>
<pre class="brush:python; toolbar: true; auto-links: false;"># templates/getsentry.erb

upstream internal {
&lt;% @hosts.each do |host| %&gt;
  server &lt;%= host %&gt;;
&lt;% end %&gt;
}

server {
  location / {
    uwsgi_pass         internal;

    uwsgi_param   Host                 $host;
    uwsgi_param   X-Real-IP            $remote_addr;
    uwsgi_param   X-Forwarded-For      $proxy_add_x_forwarded_for;
    uwsgi_param   X-Forwarded-Proto    $http_x_forwarded_proto;

    include uwsgi_params;
  }
}</pre>
<p><span style="background-color:#F6F6F6;font-family:Verdana, sans-serif, 宋体;line-height:21px;font-size:10pt;">现在，我们已经设置了uwsgi的主机数量并分配了权重值，从9000</span><span style="background-color:#F6F6F6;font-family:Verdana, sans-serif, 宋体;line-height:21px;font-size:10pt;">端口开始</span><span style="background-color:#F6F6F6;font-family:Verdana, sans-serif, 宋体;line-height:21px;font-size:10pt;"></span><span style="background-color:#F6F6F6;font-family:Verdana, sans-serif, 宋体;line-height:21px;font-size:10pt;">，它们都是被uwsgi配置使用的套接字地址。</span><span style="background-color:#F6F6F6;font-family:Verdana, sans-serif, 宋体;line-height:21px;font-size:10pt;"></span></p>
<h2>uwsgi </h2>
<p><span style="line-height:1.5;font-size:10pt;">另一方面，我们使用</span><span style="line-height:1.5;font-size:10pt;">supervisor来控制</span><span style="line-height:1.5;font-size:10pt;">uwsg进程，这也非常简单：</span><span style="line-height:1.5;font-size:10pt;"></span></p>
<pre class="brush:ruby; toolbar: true; auto-links: false;"># recipes/web.rb

command = &quot;/srv/www/getsentry.com/env/bin/uwsgi -s 127.0.0.1:90%(process_num)02d --need-app --disable-logging --wsgi-file getsentry/wsgi.py --processes 1 --threads #{node['getsentry']['web']['threads']}&quot;

supervisor_service &quot;web&quot; do
  directory &quot;/srv/www/getsentry.com/current/&quot;
  command command
  user &quot;dcramer&quot;
  stdout_logfile &quot;syslog&quot;
  stderr_logfile &quot;syslog&quot;
  startsecs 10
  stopsignal &quot;QUIT&quot;
  stopasgroup true
  killasgroup true
  process_name '%(program_name)s %(process_num)02d'
  numprocs node['getsentry']['web']['processes']
end</pre>
<h2>位置的选择 </h2>
<p><span style="line-height:1.5;font-size:10pt;">除非有人想出了一个非常有说服力的论据：为什么应该有另一种方式（或某种该情形下不能工作的情况），我希望能听到这种模式因为Python的世界变得更标准。最起码，我希望看到</span><span style="line-height:1.5;font-size:10pt;">关于如何提高uwsgi内进程管理的</span><span style="line-height:1.5;font-size:10pt;">一些辩论的</span><span style="line-height:1.5;font-size:10pt;">火花</span><span style="line-height:1.5;font-size:10pt;">。</span></p>
<p><span style="line-height:1.5;font-size:10pt;"></span><span style="line-height:1.5;font-size:10pt;">如果你要精简这个帖子，留下这句话：</span><strong>uwsgi线程（或非线程）</strong><span style="line-height:1.5;font-size:10pt;"><strong>服务是</strong></span><strong>Python的Web应用</strong><span style="line-height:1.5;font-size:10pt;"><strong>的</strong></span><strong>程序唯一选择</strong><span style="line-height:1.5;font-size:10pt;">。</span></p>
<p><span style="line-height:1.5;font-size:10pt;">（我匆匆写了这篇文章来说明今天的一些研究结果，所以难免简单，错别字请谅解）</span></p>
</div>
<div class="links">
    <p>本文地址：<a href="http://www.oschina.net/translate/serving-python-web-applications">http://www.oschina.net/translate/serving-python-web-applications</a></p>
    <p>原文地址：<a href="http://justcramer.com/2013/06/27/serving-python-web-applications/">http://justcramer.com/2013/06/27/serving-python-web-applications/</a></p>
</div>
<div class="copyright">
    本文中的所有译文仅用于学习和交流目的，转载请务必注明文章译者、出处、和本文链接<br/>
    我们的翻译工作遵照 <a href='http://zh.wikipedia.org/wiki/Wikipedia:CC' target='_blank'>CC 协议</a>，如果我们的工作有侵犯到您的权益，请及时联系我们
</div>
</body>
</html>

<!-- Generated by OsChina.NET (init:0[ms],page:2[ms],ip:183.12.44.198) -->